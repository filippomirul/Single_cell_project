library(tidyverse)
library(Seurat)
library(patchwork)
getwd()
data <- load("../scRNAseq_CS4_unknown-20230522/data/BUM.rds")
data <- readRDS("../scRNAseq_CS4_unknown-20230522/data/BUM.rds")
View(data)
??ifnb_list
ifnb_list
load("./data/ifnb.RData")
norm_data <- NormalizeData(data)
nn_data <- FindVariableFeatures(norm_data)
View(nn_data)
dim(data)
colnames(data)
View(data)
View(nn_data)
data <- readRDS("data/BUM.rds")
gc()
library(tidyverse) # collection of packages for tidy data analysis (ggplot, dplyr, ...)
library(Seurat) # single cell analysis (Check that the version is at least 4.0.0)
library(patchwork) # combine separate ggplots into the same graphic
load("./data/ifnb.RData")
ifnb_list
ifnb_list <- lapply(X = ifnb_list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x)
}
)
View(ifnb_list)
help("SelectIntegrationFeatures")
integration_features <- SelectIntegrationFeatures(object.list = ifnb_list)
head(integration_features)
integration_features
integration_anchors <- FindIntegrationAnchors(object.list = ifnb_list,
anchor.features = integration_features)
data <- readRDS("data/BUM.rds")
dim(data)
colnames(data)[1:15]
help(CreateSeuratObject)
library(tidyverse)
library(Seurat)
library(patchwork)
View(data)
dat <- CreateSeuratObject(data, min.cells = 5, min.features = 50)
View(dat)
load("./data/pbmc.RData")
pbmc_mat[500:505, 1:30] # Examine a few genes in the first 30 cells
pbmc_mat[c("CD3D", "TCL1A", "MS4A1"), 1:30]
pbmc <- CreateSeuratObject(counts = pbmc_mat,
project = "pbmc", # name of the project
min.cells = 3,   # filter for genes (rows)
min.features = 50 # filter for cells (columns)
)
pbmc
View(pbmc_mat)
View(dat)
View(data)
View(pbmc_mat)
View(data)
View(pbmc_mat)
View(data)
# The [[ operator can add columns to the object meta.data, ideal to stash QC stats
pbmc[["percent_mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
p1<- VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent_mt"), ncol = 3, pt.size = 0.01)
p1
p1<- VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent_mt"), ncol = 3, pt.size = 0.01)
View(pbmc)
p1<- VlnPlot(dat, features = c("nFeature_RNA", "nCount_RNA", "percent_mt"), ncol = 3, pt.size = 0.01)
help(PercentageFeatureSet)
head(dat@assays[["RNA"]]@meta.features)
dat@assays[["RNA"]]@meta.features
dat$orig.ident
dat$nFeature_RNA
head(dat@meta.data,10)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent_mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
dat@assays[["RNA"]]@meta.features
dat$orig.ident
dat$orig.ident[1]
View(dat)
dat@meta.data
dat@assays
pbmc[["percent_mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
help(PercentageFeatureSet)
dat[["percent_mt"]] <- PercentageFeatureSet(dat, pattern = "^MT-")
head(dat@meta.data, 5)
sum(dat@meta.data$percent_mt)
head(dat@assays[["RNA"]]@counts@p)
head(dat@assays[["RNA"]]@counts@i)
p1<- VlnPlot(dat, features = c("nFeature_RNA", "nCount_RNA", "percent_mt"),
ncol = 3, pt.size = 0.01)
plot1 <- FeatureScatter(dat, feature1 = "nCount_RNA", feature2 = "percent_mt")
plot2 <- FeatureScatter(dat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
help(PercentageFeatureSet)
dat[["percent_mt"]] <- PercentageFeatureSet(dat, pattern = "^mt-")
head(dat@meta.data, 5)
sum(dat@meta.data$percent_mt)
dat@meta.data
# Chunk 1
set.seed(62)
library(tidyverse)
library(Seurat)
library(patchwork)
library(celldex)
library(SingleR)
library(SummarizedExperiment)
# Chunk 2
data <- readRDS("../Single_cell_project/data/EOB.rds")
dim(data)
colnames(data)[1:15]
# Chunk 3
dat <- CreateSeuratObject(data, min.cells = 8, min.features = 70)
# Chunk 4
dat[["percent_mt"]] <- PercentageFeatureSet(dat, pattern = "^MT-")
head(dat@meta.data, 5)
sum(dat@meta.data$percent_mt)
# Chunk 5
if (sum(dat@meta.data$percent_mt) > 0){
p1<- VlnPlot(dat, features = c("nFeature_RNA", "nCount_RNA", "percent_mt"),
ncol = 3, pt.size = 0.01)
p1
plot1 <- FeatureScatter(dat, feature1 = "nCount_RNA", feature2 = "percent_mt")
plot2 <- FeatureScatter(dat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
}
# Chunk 6
dat <- NormalizeData(dat)
dat <- FindVariableFeatures(dat)
dat <- ScaleData(dat)
# Chunk 7
s_genes <- cc.genes$s.genes    # S phrase reference
g2m_genes <- cc.genes$g2m.genes   # G2M phrase reference
cell_cycle <- CellCycleScoring(dat, s.features = s_genes, g2m.features = g2m_genes, set.ident = F)
cell_cycle <- RunPCA(cell_cycle, features = c(s_genes, g2m_genes))
dat <- RunPCA(dat)
dat <- RunUMAP(dat, reduction = "pca", dims = 1:20)
DimPlot(dat)
dat <- FindNeighbors(dat, reduction = "pca", dims = 1:20)
dat <- FindClusters(dat)
DimPlot(dat)
ref <- MouseRNAseqData()
length(ref$label.main)
ref$label.main[1:30]
pred <- SingleR(test=dat[["RNA"]]@counts,
ref=ref.data, labels=ref.data$label.main, fine.tune = TRUE, prune = TRUE)
pred <- SingleR(test=dat[["RNA"]]@counts,
ref=ref.data, labels=ref.data$label.main, fine.tune = TRUE, prune = TRUE)
ref <- MouseRNAseqData()
# Chunk 1
set.seed(62)
library(tidyverse)
library(Seurat)
library(patchwork)
library(celldex)
library(SingleR)
library(SummarizedExperiment)
# Chunk 2
data <- readRDS("../Single_cell_project/data/EOB.rds")
dim(data)
colnames(data)[1:15]
# Chunk 3
dat <- CreateSeuratObject(data, min.cells = 8, min.features = 70)
# Chunk 4
dat[["percent_mt"]] <- PercentageFeatureSet(dat, pattern = "^MT-")
head(dat@meta.data, 5)
sum(dat@meta.data$percent_mt)
# Chunk 5
if (sum(dat@meta.data$percent_mt) > 0){
p1<- VlnPlot(dat, features = c("nFeature_RNA", "nCount_RNA", "percent_mt"),
ncol = 3, pt.size = 0.01)
p1
plot1 <- FeatureScatter(dat, feature1 = "nCount_RNA", feature2 = "percent_mt")
plot2 <- FeatureScatter(dat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
}
# Chunk 6
dat <- NormalizeData(dat)
dat <- FindVariableFeatures(dat)
dat <- ScaleData(dat)
# Chunk 7
s_genes <- cc.genes$s.genes    # S phrase reference
g2m_genes <- cc.genes$g2m.genes   # G2M phrase reference
cell_cycle <- CellCycleScoring(dat, s.features = s_genes, g2m.features = g2m_genes, set.ident = F)
cell_cycle <- RunPCA(cell_cycle, features = c(s_genes, g2m_genes))
dat <- RunPCA(dat)
dat <- RunUMAP(dat, reduction = "pca", dims = 1:20)
dat <- FindNeighbors(dat, reduction = "pca", dims = 1:20)
dat <- FindClusters(dat)
ref <- MouseRNAseqData()
length(ref$label.main)
ref$label.main[1:30]
pred <- SingleR(test=dat[["RNA"]]@counts,
ref=ref.data, labels=ref.data$label.main, fine.tune = TRUE, prune = TRUE)
pred <- SingleR(test=dat[["RNA"]]@counts,
ref=ref, labels=ref.data$label.main, fine.tune = TRUE, prune = TRUE)
pred <- SingleR(test=dat[["RNA"]]@counts,
ref=ref, labels=ref$label.main, fine.tune = TRUE, prune = TRUE)
length(pred)
identical(colnames(dat),rownames(pred))
dat@meta.data$SingleR_label <- pred$pruned.labels
DimPlot(dat, group.by = "SingleR_label")
DimPlot(dat)
DimPlot(dat, group.by = "SingleR_label")
table(pred$labels)
table(pred$pruned.labels)
table(is.na(pred$pruned.labels))
# Chunk 1
set.seed(62)
library(tidyverse)
library(Seurat)
library(patchwork)
library(celldex)
library(SingleR)
library(SummarizedExperiment)
# Chunk 2
data <- readRDS("../Single_cell_project/data/EOB.rds")
dim(data)
colnames(data)[1:15]
dat <- CreateSeuratObject(data, min.cells = 8, min.features = 70)
dat[["percent_mt"]] <- PercentageFeatureSet(dat, pattern = "^ERCC-")
head(dat@meta.data, 5)
sum(dat@meta.data$percent_mt)
if (sum(dat@meta.data$percent_mt) > 0){
p1<- VlnPlot(dat, features = c("nFeature_RNA", "nCount_RNA", "percent_mt"),
ncol = 3, pt.size = 0.01)
p1
plot1 <- FeatureScatter(dat, feature1 = "nCount_RNA", feature2 = "percent_mt")
plot2 <- FeatureScatter(dat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
}
View(dat)
VlnPlot(dat, features = c("nFeature_RNA", "nCount_RNA", "percent_mt"),
ncol = 3, pt.size = 0.01)
dat <- subset(dat, percent_mt > 7,
nFeatures > 250)
View(dat)
dat <- subset(dat, percent_mt > 7,
nFeatures_RNA > 250)
dat <- subset(dat, subset = percent_mt > 7 &
nFeatures_RNA > 250)
dat <- subset(dat, subset = percent_mt > 7 &
nFeature_RNA > 250)
dat <- NormalizeData(dat)
dat <- FindVariableFeatures(dat)
dat <- ScaleData(dat)
dat <- RunPCA(dat)
dat <- CreateSeuratObject(data, min.cells = 8, min.features = 70)
dat[["percent_mt"]] <- PercentageFeatureSet(dat, pattern = "^ERCC-")
head(dat@meta.data, 5)
sum(dat@meta.data$percent_mt)
dat <- subset(dat, subset = percent_mt < 8 &
nFeature_RNA > 250)
dat <- NormalizeData(dat)
dat <- FindVariableFeatures(dat)
dat <- ScaleData(dat)
dat <- RunPCA(dat)
dat <- RunUMAP(dat, reduction = "pca", dims = 1:20)
DimPlot(dat)
dat <- FindNeighbors(dat, reduction = "pca", dims = 1:20)
dat <- FindClusters(dat)
DimPlot(dat)
ref <- MouseRNAseqData()
set.seed(62)
library(tidyverse)
library(Seurat)
library(patchwork)
library(celldex)
library(SingleR)
library(SummarizedExperiment)
??scale.default
??scale.data
help("ScaleData")
library(tidyverse) # collection of packages for tidy data analysis (ggplot, dplyr, ...)
library(Seurat) # single cell analysis (Check that the version is at least 4.0.0)
library(patchwork) # combine separate ggplots into the same graphic
load("./data/pbmc.RData")
pbmc_mat[500:505, 1:30] # Examine a few genes in the first 30 cells
pbmc_mat[c("CD3D", "TCL1A", "MS4A1"), 1:30]
pbmc <- CreateSeuratObject(counts = pbmc_mat,
project = "pbmc", # name of the project
min.cells = 3,   # filter for genes (rows)
min.features = 50 # filter for cells (columns)
)
pbmc
# The [[ operator can add columns to the object meta.data, ideal to stash QC stats
pbmc[["percent_mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
p1<- VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent_mt"), ncol = 3, pt.size = 0.01)
p1
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent_mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 &
nFeature_RNA < 2500 &
percent_mt < 5)
pbmc
pbmc <- NormalizeData(pbmc,
normalization.method = "LogNormalize",
scale.factor = 10000)
pbmc[["RNA"]]@data[1:10,1:30]
pbmc <- FindVariableFeatures(pbmc,
selection.method = "vst",
nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
top10
# plot variable features with labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
plot1
plot2
pbmc <- RunPCA(pbmc,
features = VariableFeatures(object = pbmc),
verbose = F)
all_genes <- rownames(pbmc) # perform scaling on all genes (by default, only the top 2000 are scaled)
pbmc <- ScaleData(pbmc,
features = all_genes)
pbmc[["RNA"]]@scale.data[1:5,1:10]
pbmc <- RunPCA(pbmc,
features = VariableFeatures(object = pbmc),
verbose = F)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1:2,
cells = 500,
balanced = TRUE)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
pbmc <- RunTSNE(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "tsne",label=T)
library("SingleR")
library("celldex")
library("SummarizedExperiment")
library("Seurat")
load("./data/pbmc.RData")
pbmc <- CreateSeuratObject(counts = pbmc_mat)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc)
pbmc <- ScaleData(pbmc)
pbmc <- RunPCA(pbmc)
pbmc <- RunUMAP(pbmc, reduction = "pca", dims = 1:30)
pbmc <- FindNeighbors(pbmc, reduction = "pca", dims = 1:30)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Loading Human Primary Cell Atlas dataset (Mabbott et al. 2013) as the reference
ref.data <- HumanPrimaryCellAtlasData()
ref.data
ref.data$label.main[1:50]
pbmc_sce<- as.SingleCellExperiment(DietSeurat(pbmc)) #SingleCellExperiment structure derived from SummarizedExperiment for single-cell data
pbmc_sce
